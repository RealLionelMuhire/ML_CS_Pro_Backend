# Generated by Django 4.2.13 on 2024-12-26 15:52

from django.db import migrations, models
import json
import logging

logger = logging.getLogger(__name__)

FIELDS_TO_CONVERT = [
    "bankStatement_link",
    "bank_statement_link",
    "bank_statement_proceeds_link",
    "bank_statements_link",
    "bank_statements_proceeds_link",
    "business_plan_link",
    "cdd_documents_link",
    "certificate_of_incumbency_link",
    "certificate_of_registration_link",
    "charter_link",
    "confirmationLetter_link",
    "creditor_agreement_link",
    "creditor_bank_statement_link",
    "creditor_cdd_link",
    "custody_accounts_link",
    "cv_link",
    "declaration_of_trust_link",
    "deed_of_retirement_link",
    "documentary_evidence_link",
    "donor_bank_statement_link",
    "donor_source_of_wealth_link",
    "due_diligence_link",
    "executor_letter_link",
    "financial_statements_link",
    "funds_link",
    "insurance_pay_out_link",
    "latest_accounts_link",
    "latest_accounts_or_bank_statements_link",
    "lease_agreement_link",
    "legal_document_link",
    "letter_from_donor_link",
    "letter_from_relevant_org_link",
    "licence_link",
    "loan_agreement_link",
    "loan_bank_statement_link",
    "lottery_bank_statement_link",
    "national_id_link",
    "notarised_documents_link",
    "notary_letter_link",
    "passport_link",
    "payslips_link",
    "principals_foundation_link",
    "principals_identification_link",
    "professionalReference_link",
    "proof_of_ownership_link",
    "proof_of_source_of_funds_link",
    "proof_of_source_of_wealth_link",
    "property_contract_link",
    "register_of_trustee_link",
    "registered_office_link",
    "registration_certificate_link",
    "related_third_party_bank_statement_link",
    "related_third_party_cdd_link",
    "related_third_party_loan_agreement_link",
    "retirement_annuity_fund_statement_link",
    "shareholders_link",
    "signature_link",
    "signed_letter_from_notary_link",
    "source_of_funds_link",
    "source_of_wealth_link",
    "unrelated_third_party_bank_statement_link",
    "unrelated_third_party_cdd_link",
    "unrelated_third_party_loan_agreement_link",
    "utility_link",
    "wealth_link",
    "other_necessary_documents_link"
]

def convert_to_json(apps, schema_editor):
    Client = apps.get_model("backend", "UncompletedClient")
    clients_to_update = []
    
    for client in Client.objects.all():
        modified = False
        for field in FIELDS_TO_CONVERT:
            value = getattr(client, field, None)
            if value and isinstance(value, str):
                try:
                    # Check if valid JSON
                    json.loads(value)
                except json.JSONDecodeError:
                    # If not, wrap in a list
                    setattr(client, field, json.dumps([value]))
                    modified = True
        if modified:
            clients_to_update.append(client)

    # Batch update
    if clients_to_update:
        Client.objects.bulk_update(clients_to_update, FIELDS_TO_CONVERT)
        logger.info(f"Updated {len(clients_to_update)} UncompletedClient records.")

class Migration(migrations.Migration):

    dependencies = [
        ("backend", "0062_uncompletedclient_other_necessary_documents_link"),
    ]

    operations = [
        migrations.RunPython(convert_to_json),
        *[
            migrations.AlterField(
                model_name="uncompletedclient",
                name=field,
                field=models.JSONField(blank=True, null=True),
            )
            for field in FIELDS_TO_CONVERT
        ],
    ]
